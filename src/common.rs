use std::cmp::max;
use std::cmp::min;

pub const TILE_W: u16 = 3;
pub const TILE_H: u16 = 1;
pub const FRAMES_PER_SECOND: u16 = 8;

//#[rustfmt::skip]
//pub const TEST_MAP_TILES: [u8; (TEST_MAP_WIDTH * TEST_MAP_HEIGHT) as usize] = [
//    1, 1, 1, 1, 1, 1,
//    1, 0, 0, 0, 2, 1,
//    1, 0, 0, 2, 2, 1,
//    1, 0, 0, 2, 2, 1,
//    1, 0, 2, 0, 0, 1,
//    1, 0, 0, 0, 0, 1,
//    1, 1, 1, 1, 1, 1,
//];
//pub const TEST_MAP_WIDTH: u16 = 6;
//pub const TEST_MAP_HEIGHT: u16 = 7;

#[rustfmt::skip]
pub const TEST_MAP_TILES: [&str; (TEST_MAP_WIDTH * TEST_MAP_HEIGHT) as usize] = [
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[d]", "[d]", "[d]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[d]", "[d]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[d]", "[d]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[d]", "[l]", "[d]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[d]", "[d]", "[d]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[d]", "[d]", "[d]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[d]", "[d]", "[d]", "[d]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[d]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[d]", "[d]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[l]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[d]", "[d]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[l]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[l]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[l]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
    "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]", "[D]",
];
pub const TEST_MAP_WIDTH: u16 = 25;
pub const TEST_MAP_HEIGHT: u16 = 22;

pub struct Point<W> {
    pub x: W,
    pub y: W,
}

impl<W> Point<W> {
    pub fn new(x: W, y: W) -> Self {
        Self { x, y }
    }
}

#[derive(Debug)]
pub struct RectAbsolute<W> {
    pub x1: W,
    pub y1: W,
    pub x2: W,
    pub y2: W,
}
pub fn intersect(r1: &RectAbsolute<i16>, r2: &RectAbsolute<i16>) -> RectAbsolute<i16> {
    let x1 = max(r1.x1, r2.x1);
    let y1 = max(r1.y1, r2.y1);
    let x2 = min(r1.x2, r2.x2);
    let y2 = min(r1.y2, r2.y2);

    RectAbsolute { x1, y1, x2, y2 }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_calc_array_bounds() {}
}
